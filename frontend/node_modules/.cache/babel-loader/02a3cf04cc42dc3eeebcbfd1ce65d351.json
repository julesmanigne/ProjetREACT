{"ast":null,"code":"import _slicedToArray from \"E:\\\\ING4\\\\Webdynamique\\\\ProjetREACT\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\ING4\\\\Webdynamique\\\\ProjetREACT\\\\frontend\\\\src\\\\App.jsx\";\nimport * as React from 'react';\nimport IconButton from '@mui/material/IconButton';\nimport Box from '@mui/material/Box';\nimport { useTheme, ThemeProvider, createTheme } from '@mui/material/styles';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nconst ColorModeContext = React.createContext({\n  toggleColorMode: () => {}\n});\n\nfunction App() {\n  const theme = useTheme();\n  const colorMode = React.useContext(ColorModeContext);\n  return React.createElement(Box, {\n    sx: {\n      display: 'flex',\n      width: '100%',\n      alignItems: 'center',\n      justifyContent: 'center',\n      bgcolor: 'background.default',\n      color: 'text.primary',\n      borderRadius: 1,\n      p: 3\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, theme.palette.mode, \" mode\", React.createElement(IconButton, {\n    sx: {\n      ml: 1\n    },\n    onClick: colorMode.toggleColorMode,\n    color: \"inherit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, theme.palette.mode === 'dark' ? React.createElement(Brightness7Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }) : React.createElement(Brightness4Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })));\n}\n\nexport default function ToggleColorMode() {\n  const _ref = React.useState < 'light' | 'dark' > 'light',\n        _ref2 = _slicedToArray(_ref, 2),\n        mode = _ref2[0],\n        setMode = _ref2[1];\n\n  const colorMode = React.useMemo(() => ({\n    toggleColorMode: () => {\n      setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n    }\n  }), []);\n  const theme = React.useMemo(() => createTheme({\n    palette: {\n      mode\n    }\n  }), [mode]);\n  return React.createElement(ColorModeContext.Provider, {\n    value: colorMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(ThemeProvider, {\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(MyApp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["E:/ING4/Webdynamique/ProjetREACT/frontend/src/App.jsx"],"names":["React","IconButton","Box","useTheme","ThemeProvider","createTheme","Brightness4Icon","Brightness7Icon","ColorModeContext","createContext","toggleColorMode","App","theme","colorMode","useContext","display","width","alignItems","justifyContent","bgcolor","color","borderRadius","p","palette","mode","ml","ToggleColorMode","useState","setMode","useMemo","prevMode"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,WAAlC,QAAqD,sBAArD;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AAEA,MAAMC,gBAAgB,GAAGR,KAAK,CAACS,aAAN,CAAoB;AAAEC,EAAAA,eAAe,EAAE,MAAM,CAAE;AAA3B,CAApB,CAAzB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,KAAK,GAAGT,QAAQ,EAAtB;AACA,QAAMU,SAAS,GAAGb,KAAK,CAACc,UAAN,CAAiBN,gBAAjB,CAAlB;AACA,SACE,oBAAC,GAAD;AACE,IAAA,EAAE,EAAE;AACFO,MAAAA,OAAO,EAAE,MADP;AAEFC,MAAAA,KAAK,EAAE,MAFL;AAGFC,MAAAA,UAAU,EAAE,QAHV;AAIFC,MAAAA,cAAc,EAAE,QAJd;AAKFC,MAAAA,OAAO,EAAE,oBALP;AAMFC,MAAAA,KAAK,EAAE,cANL;AAOFC,MAAAA,YAAY,EAAE,CAPZ;AAQFC,MAAAA,CAAC,EAAE;AARD,KADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYGV,KAAK,CAACW,OAAN,CAAcC,IAZjB,WAaE,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAE;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAhB;AAA2B,IAAA,OAAO,EAAEZ,SAAS,CAACH,eAA9C;AAA+D,IAAA,KAAK,EAAC,SAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,KAAK,CAACW,OAAN,CAAcC,IAAd,KAAuB,MAAvB,GAAgC,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhC,GAAsD,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADzD,CAbF,CADF;AAmBD;;AAED,eAAe,SAASE,eAAT,GAA2B;AAAA,eAChB1B,KAAK,CAAC2B,QAAN,GAAe,OAAf,GAAyB,SAAQ,OADjB;AAAA;AAAA,QACjCH,IADiC;AAAA,QAC3BI,OAD2B;;AAExC,QAAMf,SAAS,GAAGb,KAAK,CAAC6B,OAAN,CAChB,OAAO;AACLnB,IAAAA,eAAe,EAAE,MAAM;AACrBkB,MAAAA,OAAO,CAAEE,QAAD,IAAeA,QAAQ,KAAK,OAAb,GAAuB,MAAvB,GAAgC,OAAhD,CAAP;AACD;AAHI,GAAP,CADgB,EAMhB,EANgB,CAAlB;AASA,QAAMlB,KAAK,GAAGZ,KAAK,CAAC6B,OAAN,CACZ,MACExB,WAAW,CAAC;AACVkB,IAAAA,OAAO,EAAE;AACPC,MAAAA;AADO;AADC,GAAD,CAFD,EAOZ,CAACA,IAAD,CAPY,CAAd;AAUA,SACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEX,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAED,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD","sourcesContent":["import * as React from 'react';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme, ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\r\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\r\n\r\nconst ColorModeContext = React.createContext({ toggleColorMode: () => {} });\r\n\r\nfunction App() {\r\n  const theme = useTheme();\r\n  const colorMode = React.useContext(ColorModeContext);\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        width: '100%',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        bgcolor: 'background.default',\r\n        color: 'text.primary',\r\n        borderRadius: 1,\r\n        p: 3,\r\n      }}\r\n    >\r\n      {theme.palette.mode} mode\r\n      <IconButton sx={{ ml: 1 }} onClick={colorMode.toggleColorMode} color=\"inherit\">\r\n        {theme.palette.mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default function ToggleColorMode() {\r\n  const [mode, setMode] = React.useState<'light' | 'dark'>('light');\r\n  const colorMode = React.useMemo(\r\n    () => ({\r\n      toggleColorMode: () => {\r\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\r\n      },\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode,\r\n        },\r\n      }),\r\n    [mode],\r\n  );\r\n\r\n  return (\r\n    <ColorModeContext.Provider value={colorMode}>\r\n      <ThemeProvider theme={theme}>\r\n        <MyApp />\r\n      </ThemeProvider>\r\n    </ColorModeContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}