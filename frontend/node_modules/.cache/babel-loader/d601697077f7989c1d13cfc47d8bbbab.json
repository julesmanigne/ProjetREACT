{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"aria-label\", \"aria-valuetext\", \"aria-labelledby\", \"className\", \"component\", \"classes\", \"disableSwap\", \"disabled\", \"getAriaLabel\", \"getAriaValueText\", \"marks\", \"max\", \"min\", \"name\", \"onChange\", \"onChangeCommitted\", \"orientation\", \"scale\", \"step\", \"tabIndex\", \"track\", \"value\", \"valueLabelDisplay\", \"valueLabelFormat\", \"isRtl\", \"slotProps\", \"slots\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport isHostComponent from '../utils/isHostComponent';\nimport composeClasses from '../composeClasses';\nimport { getSliderUtilityClass } from './sliderUnstyledClasses';\nimport SliderValueLabelUnstyled from './SliderValueLabelUnstyled';\nimport useSlider, { valueToPercent } from './useSlider';\nimport useSlotProps from '../utils/useSlotProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst Identity = x => x;\n\nconst useUtilityClasses = ownerState => {\n  const disabled = ownerState.disabled,\n        dragging = ownerState.dragging,\n        marked = ownerState.marked,\n        orientation = ownerState.orientation,\n        track = ownerState.track,\n        classes = ownerState.classes;\n  const slots = {\n    root: ['root', disabled && 'disabled', dragging && 'dragging', marked && 'marked', orientation === 'vertical' && 'vertical', track === 'inverted' && 'trackInverted', track === false && 'trackFalse'],\n    rail: ['rail'],\n    track: ['track'],\n    mark: ['mark'],\n    markActive: ['markActive'],\n    markLabel: ['markLabel'],\n    markLabelActive: ['markLabelActive'],\n    valueLabel: ['valueLabel'],\n    thumb: ['thumb', disabled && 'disabled'],\n    active: ['active'],\n    disabled: ['disabled'],\n    focusVisible: ['focusVisible']\n  };\n  return composeClasses(slots, getSliderUtilityClass, classes);\n};\n\nconst Forward = ({\n  children\n}) => children;\n\nconst SliderUnstyled =\n/*#__PURE__*/\nReact.forwardRef(function SliderUnstyled(props, ref) {\n  var _ref, _slots$rail, _slots$track, _slots$thumb, _slots$valueLabel, _slots$mark, _slots$markLabel;\n\n  const ariaLabel = props['aria-label'],\n        ariaValuetext = props['aria-valuetext'],\n        ariaLabelledby = props['aria-labelledby'],\n        className = props.className,\n        component = props.component,\n        classesProp = props.classes,\n        _props$disableSwap = props.disableSwap,\n        disableSwap = _props$disableSwap === void 0 ? false : _props$disableSwap,\n        _props$disabled = props.disabled,\n        disabled = _props$disabled === void 0 ? false : _props$disabled,\n        getAriaLabel = props.getAriaLabel,\n        getAriaValueText = props.getAriaValueText,\n        _props$marks = props.marks,\n        marksProp = _props$marks === void 0 ? false : _props$marks,\n        _props$max = props.max,\n        max = _props$max === void 0 ? 100 : _props$max,\n        _props$min = props.min,\n        min = _props$min === void 0 ? 0 : _props$min,\n        _props$orientation = props.orientation,\n        orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n        _props$scale = props.scale,\n        scale = _props$scale === void 0 ? Identity : _props$scale,\n        _props$step = props.step,\n        step = _props$step === void 0 ? 1 : _props$step,\n        _props$track = props.track,\n        track = _props$track === void 0 ? 'normal' : _props$track,\n        _props$valueLabelDisp = props.valueLabelDisplay,\n        valueLabelDisplay = _props$valueLabelDisp === void 0 ? 'off' : _props$valueLabelDisp,\n        _props$valueLabelForm = props.valueLabelFormat,\n        valueLabelFormat = _props$valueLabelForm === void 0 ? Identity : _props$valueLabelForm,\n        _props$isRtl = props.isRtl,\n        isRtl = _props$isRtl === void 0 ? false : _props$isRtl,\n        _props$slotProps = props.slotProps,\n        slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n        _props$slots = props.slots,\n        slots = _props$slots === void 0 ? {} : _props$slots,\n        other = _objectWithoutPropertiesLoose(props, _excluded); // all props with defaults\n  // consider extracting to hook an reusing the lint rule for the variants\n\n\n  const ownerState = _extends({}, props, {\n    marks: marksProp,\n    classes: classesProp,\n    disabled,\n    isRtl,\n    max,\n    min,\n    orientation,\n    scale,\n    step,\n    track,\n    valueLabelDisplay,\n    valueLabelFormat\n  });\n\n  const _useSlider = useSlider(_extends({}, ownerState, {\n    ref\n  })),\n        axisProps = _useSlider.axisProps,\n        getRootProps = _useSlider.getRootProps,\n        getHiddenInputProps = _useSlider.getHiddenInputProps,\n        getThumbProps = _useSlider.getThumbProps,\n        open = _useSlider.open,\n        active = _useSlider.active,\n        axis = _useSlider.axis,\n        range = _useSlider.range,\n        focusedThumbIndex = _useSlider.focusedThumbIndex,\n        dragging = _useSlider.dragging,\n        marks = _useSlider.marks,\n        values = _useSlider.values,\n        trackOffset = _useSlider.trackOffset,\n        trackLeap = _useSlider.trackLeap;\n\n  ownerState.marked = marks.length > 0 && marks.some(mark => mark.label);\n  ownerState.dragging = dragging;\n  ownerState.focusedThumbIndex = focusedThumbIndex;\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: [classes.root, className]\n  });\n  const Rail = (_slots$rail = slots.rail) != null ? _slots$rail : 'span';\n  const railProps = useSlotProps({\n    elementType: Rail,\n    externalSlotProps: slotProps.rail,\n    ownerState,\n    className: classes.rail\n  });\n  const Track = (_slots$track = slots.track) != null ? _slots$track : 'span';\n  const trackProps = useSlotProps({\n    elementType: Track,\n    externalSlotProps: slotProps.track,\n    additionalProps: {\n      style: _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap))\n    },\n    ownerState,\n    className: classes.track\n  });\n  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : 'span';\n  const thumbProps = useSlotProps({\n    elementType: Thumb,\n    getSlotProps: getThumbProps,\n    externalSlotProps: slotProps.thumb,\n    ownerState\n  });\n  const ValueLabel = (_slots$valueLabel = slots.valueLabel) != null ? _slots$valueLabel : SliderValueLabelUnstyled;\n  const valueLabelProps = useSlotProps({\n    elementType: ValueLabel,\n    externalSlotProps: slotProps.valueLabel,\n    ownerState\n  });\n  const Mark = (_slots$mark = slots.mark) != null ? _slots$mark : 'span';\n  const markProps = useSlotProps({\n    elementType: Mark,\n    externalSlotProps: slotProps.mark,\n    ownerState,\n    className: classes.mark\n  });\n  const MarkLabel = (_slots$markLabel = slots.markLabel) != null ? _slots$markLabel : 'span';\n  const markLabelProps = useSlotProps({\n    elementType: MarkLabel,\n    externalSlotProps: slotProps.markLabel,\n    ownerState\n  });\n  const Input = slots.input || 'input';\n  const inputProps = useSlotProps({\n    elementType: Input,\n    getSlotProps: getHiddenInputProps,\n    externalSlotProps: slotProps.input,\n    ownerState\n  });\n  return (\n    /*#__PURE__*/\n    _jsxs(Root, _extends({}, rootProps, {\n      children: [\n      /*#__PURE__*/\n      _jsx(Rail, _extends({}, railProps)),\n      /*#__PURE__*/\n      _jsx(Track, _extends({}, trackProps)), marks.filter(mark => mark.value >= min && mark.value <= max).map((mark, index) => {\n        const percent = valueToPercent(mark.value, min, max);\n        const style = axisProps[axis].offset(percent);\n        let markActive;\n\n        if (track === false) {\n          markActive = values.indexOf(mark.value) !== -1;\n        } else {\n          markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);\n        }\n\n        return (\n          /*#__PURE__*/\n          _jsxs(React.Fragment, {\n            children: [\n            /*#__PURE__*/\n            _jsx(Mark, _extends({\n              \"data-index\": index\n            }, markProps, !isHostComponent(Mark) && {\n              markActive\n            }, {\n              style: _extends({}, style, markProps.style),\n              className: clsx(markProps.className, markActive && classes.markActive)\n            })), mark.label != null ?\n            /*#__PURE__*/\n            _jsx(MarkLabel, _extends({\n              \"aria-hidden\": true,\n              \"data-index\": index\n            }, markLabelProps, !isHostComponent(MarkLabel) && {\n              markLabelActive: markActive\n            }, {\n              style: _extends({}, style, markLabelProps.style),\n              className: clsx(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),\n              children: mark.label\n            })) : null]\n          }, index)\n        );\n      }), values.map((value, index) => {\n        const percent = valueToPercent(value, min, max);\n        const style = axisProps[axis].offset(percent);\n        const ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabel;\n        return (\n          /*#__PURE__*/\n          _jsx(React.Fragment, {\n            children:\n            /*#__PURE__*/\n            _jsx(ValueLabelComponent, _extends({}, !isHostComponent(ValueLabelComponent) && {\n              valueLabelFormat,\n              valueLabelDisplay,\n              value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,\n              index,\n              open: open === index || active === index || valueLabelDisplay === 'on',\n              disabled\n            }, valueLabelProps, {\n              className: clsx(classes.valueLabel, valueLabelProps.className),\n              children:\n              /*#__PURE__*/\n              _jsx(Thumb, _extends({\n                \"data-index\": index,\n                \"data-focusvisible\": focusedThumbIndex === index\n              }, thumbProps, {\n                className: clsx(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),\n                style: _extends({}, style, {\n                  pointerEvents: disableSwap && active !== index ? 'none' : undefined\n                }, thumbProps.style),\n                children:\n                /*#__PURE__*/\n                _jsx(Input, _extends({\n                  \"data-index\": index,\n                  \"aria-label\": getAriaLabel ? getAriaLabel(index) : ariaLabel,\n                  \"aria-valuenow\": scale(value),\n                  \"aria-labelledby\": ariaLabelledby,\n                  \"aria-valuetext\": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,\n                  value: values[index]\n                }, inputProps))\n              }))\n            }))\n          }, index)\n        );\n      })]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? SliderUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The label of the slider.\n   */\n  'aria-label': chainPropTypes(PropTypes.string, props => {\n    const range = Array.isArray(props.value || props.defaultValue);\n\n    if (range && props['aria-label'] != null) {\n      return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The id of the element containing a label for the slider.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * A string value that provides a user-friendly name for the current value of the slider.\n   */\n  'aria-valuetext': chainPropTypes(PropTypes.string, props => {\n    const range = Array.isArray(props.value || props.defaultValue);\n\n    if (range && props['aria-valuetext'] != null) {\n      return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.\n   * @default false\n   */\n  disableSwap: PropTypes.bool,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n   * This is important for screen reader users.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaLabel: PropTypes.func,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n   * This is important for screen reader users.\n   * @param {number} value The thumb label's value to format.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaValueText: PropTypes.func,\n\n  /**\n   * Indicates whether the theme context has rtl direction. It is set automatically.\n   * @default false\n   */\n  isRtl: PropTypes.bool,\n\n  /**\n   * Marks indicate predetermined values to which the user can move the slider.\n   * If `true` the marks are spaced according the value of the `step` prop.\n   * If an array, it should contain objects with `value` and an optional `label` keys.\n   * @default false\n   */\n  marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.node,\n    value: PropTypes.number.isRequired\n  })), PropTypes.bool]),\n\n  /**\n   * The maximum allowed value of the slider.\n   * Should not be equal to min.\n   * @default 100\n   */\n  max: PropTypes.number,\n\n  /**\n   * The minimum allowed value of the slider.\n   * Should not be equal to max.\n   * @default 0\n   */\n  min: PropTypes.number,\n\n  /**\n   * Name attribute of the hidden `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback function that is fired when the slider's value changed.\n   *\n   * @param {Event} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   * @param {number} activeThumb Index of the currently moved thumb.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback function that is fired when the `mouseup` is triggered.\n   *\n   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   */\n  onChangeCommitted: PropTypes.func,\n\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * A transformation function, to change the scale of the slider.\n   * @default (x) => x\n   */\n  scale: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the Slider.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    mark: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    markLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    rail: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    track: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    valueLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n      children: PropTypes.element,\n      className: PropTypes.string,\n      open: PropTypes.bool,\n      style: PropTypes.object,\n      value: PropTypes.number,\n      valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on'])\n    })])\n  }),\n\n  /**\n   * The components used for each slot inside the Slider.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    mark: PropTypes.elementType,\n    markLabel: PropTypes.elementType,\n    rail: PropTypes.elementType,\n    root: PropTypes.elementType,\n    thumb: PropTypes.elementType,\n    track: PropTypes.elementType,\n    valueLabel: PropTypes.elementType\n  }),\n\n  /**\n   * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n   * The `min` prop serves as the origin for the valid values.\n   * We recommend (max - min) to be evenly divisible by the step.\n   *\n   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n   * @default 1\n   */\n  step: PropTypes.number,\n\n  /**\n   * Tab index attribute of the hidden `input` element.\n   */\n  tabIndex: PropTypes.number,\n\n  /**\n   * The track presentation:\n   *\n   * - `normal` the track will render a bar representing the slider value.\n   * - `inverted` the track will render a bar representing the remaining slider value.\n   * - `false` the track will render without a bar.\n   * @default 'normal'\n   */\n  track: PropTypes.oneOf(['inverted', 'normal', false]),\n\n  /**\n   * The value of the slider.\n   * For ranged sliders, provide an array with two values.\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n\n  /**\n   * Controls when the value label is displayed:\n   *\n   * - `auto` the value label will display when the thumb is hovered or focused.\n   * - `on` will display persistently.\n   * - `off` will never display.\n   * @default 'off'\n   */\n  valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on']),\n\n  /**\n   * The format function the value label's value.\n   *\n   * When a function is provided, it should have the following signature:\n   *\n   * - {number} value The value label's value to format\n   * - {number} index The value label's index to format\n   * @default (x) => x\n   */\n  valueLabelFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n} : void 0;\nexport default SliderUnstyled;","map":null,"metadata":{},"sourceType":"module"}